import { type NextRequest, NextResponse } from "next/server"
import { generateText } from "ai"
import { openai } from "@ai-sdk/openai"
import { createGroq } from "@ai-sdk/groq"

// Initialize Groq as fallback
const groq = createGroq({
  apiKey: process.env.GROQ_API_KEY,
})

// Mock lesson plan generator for when APIs fail
function generateMockLessonPlan(subject: string, grade: string, topic: string, duration: number) {
  return `# ${subject} Lesson Plan - ${topic}
**Grade Level:** ${grade}
**Duration:** ${duration} minutes
**Subject:** ${subject}

## Learning Objectives (CBC-Aligned)
By the end of this lesson, learners will be able to:
- Understand the key concepts of ${topic}
- Apply knowledge through practical activities
- Demonstrate understanding through assessment tasks
- Connect learning to real-world applications

## Introduction/Hook (5 minutes)
- Begin with an engaging question about ${topic}
- Show relevant visual aids or real-world examples
- Connect to learners' prior knowledge and experiences
- Set clear expectations for the lesson

## Main Activities (${duration - 15} minutes)

### Activity 1: Concept Introduction (${Math.floor((duration - 15) / 3)} minutes)
- Introduce key vocabulary and concepts
- Use interactive demonstrations
- Encourage learner participation and questions
- Provide clear explanations with examples

### Activity 2: Guided Practice (${Math.floor((duration - 15) / 3)} minutes)
- Work through examples together as a class
- Provide scaffolded support for learners
- Use think-pair-share activities
- Monitor understanding and provide feedback

### Activity 3: Independent Practice (${Math.floor((duration - 15) / 3)} minutes)
- Learners work individually or in small groups
- Apply concepts to new situations
- Complete practice exercises or activities
- Teacher circulates to provide support

## Assessment Methods
- **Formative Assessment:** Observation during activities, questioning, exit tickets
- **Summative Assessment:** Quiz, worksheet, or practical demonstration
- **Peer Assessment:** Learners evaluate each other's work
- **Self-Assessment:** Reflection on learning goals

## Differentiation Strategies
- **For Advanced Learners:** Extension activities and challenging questions
- **For Struggling Learners:** Additional support, visual aids, peer tutoring
- **For Different Learning Styles:** Visual, auditory, and kinesthetic activities
- **Language Support:** Simplified language, visual cues, translation if needed

## Resources Needed
- Textbooks and reference materials
- Visual aids (charts, diagrams, pictures)
- Manipulatives or hands-on materials
- Technology tools (if available)
- Assessment materials

## Homework/Extension Activities
- Practice exercises related to ${topic}
- Research project or investigation
- Prepare for next lesson's topic
- Real-world application tasks

## Reflection Questions
- What did you learn about ${topic} today?
- How can you apply this knowledge in your daily life?
- What questions do you still have?
- What would you like to learn more about?

## CBC Curriculum Alignment
This lesson aligns with CBC ${subject} curriculum expectations for ${grade}, focusing on:
- Core competencies development
- Values integration
- Pertinent and contemporary issues
- Assessment for learning principles

---
*Generated by AI Teaching Assistant - CBC Curriculum Aligned*`
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { subject, grade, topic, duration, objectives, resources } = body

    if (!subject || !grade || !topic) {
      return NextResponse.json(
        {
          error: "Subject, grade, and topic are required",
          fallback: generateMockLessonPlan(
            subject || "General",
            grade || "Grade 1",
            topic || "Sample Topic",
            duration || 40,
          ),
        },
        { status: 400 },
      )
    }

    const prompt = `Create a comprehensive CBC-aligned lesson plan for:
Subject: ${subject}
Grade: ${grade}
Topic: ${topic}
Duration: ${duration} minutes
Learning Objectives: ${objectives || "Generate appropriate objectives"}
Resources: ${resources || "Standard classroom resources"}

Please include:
1. Learning Objectives (CBC-aligned)
2. Introduction/Hook (5 minutes)
3. Main Activities (step-by-step)
4. Assessment Methods
5. Differentiation Strategies
6. Resources Needed
7. Homework/Extension Activities
8. Reflection Questions

Format as a detailed lesson plan suitable for Kenyan CBC curriculum.`

    let generatedContent = ""
    let provider = "unknown"

    // Try OpenAI first
    try {
      const { text } = await generateText({
        model: openai("gpt-3.5-turbo"),
        prompt,
        maxTokens: 2000,
        temperature: 0.7,
      })
      generatedContent = text
      provider = "OpenAI"
    } catch (openaiError: any) {
      console.log("OpenAI failed, trying Groq fallback:", openaiError.message)

      // Try Groq as fallback
      try {
        const { text } = await generateText({
          model: groq("llama-3.1-70b-versatile"),
          prompt,
          maxTokens: 2000,
          temperature: 0.7,
        })
        generatedContent = text
        provider = "Groq"
      } catch (groqError: any) {
        console.log("Groq also failed, using mock generator:", groqError.message)

        // Use mock generator as final fallback
        generatedContent = generateMockLessonPlan(subject, grade, topic, duration)
        provider = "Mock Generator"
      }
    }

    return NextResponse.json({
      content: generatedContent,
      provider,
      metadata: {
        subject,
        grade,
        topic,
        duration,
        generatedAt: new Date().toISOString(),
        provider,
      },
    })
  } catch (error: any) {
    console.error("Error generating lesson plan:", error)

    // Always provide a fallback response
    const fallbackContent = generateMockLessonPlan("General Subject", "Grade 1", "Sample Topic", 40)

    return NextResponse.json({
      content: fallbackContent,
      provider: "Fallback Generator",
      error: "API temporarily unavailable, showing sample lesson plan",
      metadata: {
        generatedAt: new Date().toISOString(),
        provider: "Fallback",
        originalError: error.message,
      },
    })
  }
}
